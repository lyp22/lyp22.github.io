<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QAQu’s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qaqu.net/"/>
  <updated>2021-04-29T10:59:39.283Z</updated>
  <id>https://qaqu.net/</id>
  
  <author>
    <name>QAQu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地仓库上传github</title>
    <link href="https://qaqu.net/2021-4-29-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0github/"/>
    <id>https://qaqu.net/2021-4-29-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0github/</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-04-29T10:59:39.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程库与本地库之间的操作"><a href="#远程库与本地库之间的操作" class="headerlink" title="远程库与本地库之间的操作"></a>远程库与本地库之间的操作</h1><p>1.从远程克隆一份到本地可以通过git clone</p><p>Git支持HTTPS和SSH协议，SSH速度更快</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:username&#x2F;repositoriesname.git</span><br></pre></td></tr></table></figure><p>2.本地库关联远程库，在本地仓库目录运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:username&#x2F;repositoriesname.git</span><br></pre></td></tr></table></figure><p>3.推送master分支的所有内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>第一次使用加上了-u参数，是推送内容并关联分支。</p><p>推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="把最新内容推送到Github"><a href="#把最新内容推送到Github" class="headerlink" title="把最新内容推送到Github"></a>把最新内容推送到Github</h1><p>不检查强行推送到github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><p>添加SSH Key 到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; #生成新的key文件,邮箱地址填你的Github地址</span><br><span class="line">#Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):&lt;回车就好&gt;</span><br><span class="line">#接下来会让你输入密码</span><br></pre></td></tr></table></figure><p>在github上Setting中选择SSH and GPG keys点击New SSHKey</p><p>然后找到当前用户目录下C:\Users\用户名\ .ssh id_rsa.pub文件以文本方式打开。打开之后全部复制到key中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;远程库与本地库之间的操作&quot;&gt;&lt;a href=&quot;#远程库与本地库之间的操作&quot; class=&quot;headerlink&quot; title=&quot;远程库与本地库之间的操作&quot;&gt;&lt;/a&gt;远程库与本地库之间的操作&lt;/h1&gt;&lt;p&gt;1.从远程克隆一份到本地可以通过git clone&lt;/p&gt;
&lt;p&gt;Git支持HTTPS和SSH协议，SSH速度更快&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@github.com:username&amp;#x2F;repositoriesname.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.本地库关联远程库，在本地仓库目录运行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:username&amp;#x2F;repositoriesname.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.推送master分支的所有内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第一次使用加上了-u参数，是推送内容并关联分支。&lt;/p&gt;
&lt;p&gt;推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://qaqu.net/categories/git/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>bashrc中更新cuda指向</title>
    <link href="https://qaqu.net/2021-2-26-bashrc%E4%B8%AD%E6%9B%B4%E6%96%B0cuda%E6%8C%87%E5%90%91/"/>
    <id>https://qaqu.net/2021-2-26-bashrc%E4%B8%AD%E6%9B%B4%E6%96%B0cuda%E6%8C%87%E5%90%91/</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-26T02:33:50.589Z</updated>
    
    <content type="html"><![CDATA[<p>这里是指向cuda11.0，其他版本替换cuda-11.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.0&#x2F;bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.0&#x2F;lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br><span class="line">export CUDA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是指向cuda11.0，其他版本替换cuda-11.0&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="cuda" scheme="https://qaqu.net/categories/cuda/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>B站专栏文章复制</title>
    <link href="https://qaqu.net/2020-6-20-B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/"/>
    <id>https://qaqu.net/2020-6-20-B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2020-06-20T12:11:54.637Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&#39;div.article-holder&#39;).classList.remove(&#39;unable-reprint&#39;);</span><br><span class="line">document.querySelector(&#39;div.article-holder&#39;).addEventListener(&#39;copy&#39;,function(e)&#123;</span><br><span class="line">    e.clipboardData.setData(&quot;text&quot;,window.getSelection().toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="bilibili" scheme="https://qaqu.net/categories/bilibili/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>访问谷歌xx出现but your computer or network may be sending automated queries问题的解决办法</title>
    <link href="https://qaqu.net/2020-3-4-%E8%AE%BF%E9%97%AE%E8%B0%B7%E6%AD%8Cxx%E5%87%BA%E7%8E%B0but%20your%20computer%20or%20network%20may%20be%20sending%20automated%20queries%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://qaqu.net/2020-3-4-%E8%AE%BF%E9%97%AE%E8%B0%B7%E6%AD%8Cxx%E5%87%BA%E7%8E%B0but%20your%20computer%20or%20network%20may%20be%20sending%20automated%20queries%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T04:48:38.490Z</updated>
    
    <content type="html"><![CDATA[<p>方法是在hosts中指定谷歌学术的IPv6地址。<br>首先需要VPS支持IPv6。我使用的是vultr，在server information界面，点进Settings-IPv6进行分配地址，然后修改hosts文件。</p><p>sudo nano /etc/hosts</p><p>在hosts文件中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Scholar 学术搜索</span><br><span class="line">2404:6800:4008:c06::be scholar.google.com</span><br><span class="line">2404:6800:4008:c06::be scholar.google.com.hk</span><br><span class="line">2404:6800:4008:c06::be scholar.google.com.tw</span><br><span class="line">2404:6800:4005:805::200e scholar.google.cn #www.google.cn</span><br></pre></td></tr></table></figure><p>可以在这里获取最新的IPv6地址<br><a href="https://raw.githubusercontent.com/lennylxx/ipv6-hosts/master/hosts" target="_blank" rel="noopener">https://raw.githubusercontent.com/lennylxx/ipv6-hosts/master/hosts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;方法是在hosts中指定谷歌学术的IPv6地址。&lt;br&gt;首先需要VPS支持IPv6。我使用的是vultr，在server information界面，点进Settings-IPv6进行分配地址，然后修改hosts文件。&lt;/p&gt;
&lt;p&gt;sudo nano /etc/hosts
      
    
    </summary>
    
    
      <category term="linux" scheme="https://qaqu.net/categories/linux/"/>
    
    
      <category term="vps" scheme="https://qaqu.net/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Typecho限制首页文章摘要字数的修改方法</title>
    <link href="https://qaqu.net/2020-1-25-Typecho%E9%99%90%E5%88%B6%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <id>https://qaqu.net/2020-1-25-Typecho%E9%99%90%E5%88%B6%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2020-01-25T15:42:20.187Z</updated>
    
    <content type="html"><![CDATA[<p>Typecho内置了一个限制字数函数，可以通过这个函数限制字数的方式截断摘要。如果让其不显示，通过修改typecho主题模板实现。<br>1.登陆博客后台，把鼠标移至“控制台”，在下拉菜单中选择“外观”选项<br>2.编辑主题的index.php，在index.php文件找到这样的一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content(&#39;阅读剩余部分...&#39;); ?&gt;</span><br></pre></td></tr></table></figure><p>3.将其替换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excerpt(180, &#39;...&#39;); &#x2F;&#x2F;180就是摘要的字数，...是后缀; ?&gt;</span><br></pre></td></tr></table></figure><p>4.在archive.php中找到第2步的代码，将其替换为第3步中的代码，保存文件即可显示摘要，即博客首页和分类页均不显示文章全部内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Typecho内置了一个限制字数函数，可以通过这个函数限制字数的方式截断摘要。如果让其不显示，通过修改typecho主题模板实现。&lt;br&gt;1.登陆博客后台，把鼠标移至“控制台”，在下拉菜单中选择“外观”选项&lt;br&gt;2.编辑主题的index.php，在index.php文件找
      
    
    </summary>
    
    
      <category term="Typecho" scheme="https://qaqu.net/categories/Typecho/"/>
    
    
      <category term="Typecho" scheme="https://qaqu.net/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>Chrome刷新清除某个特定网站的缓存</title>
    <link href="https://qaqu.net/2020-1-13-Chrome%E5%AF%B9%E7%89%B9%E5%AE%9A%E7%BD%91%E9%A1%B5%E5%88%B7%E6%96%B0%E7%BC%93%E5%AD%98/"/>
    <id>https://qaqu.net/2020-1-13-Chrome%E5%AF%B9%E7%89%B9%E5%AE%9A%E7%BD%91%E9%A1%B5%E5%88%B7%E6%96%B0%E7%BC%93%E5%AD%98/</id>
    <published>2020-01-12T16:00:00.000Z</published>
    <updated>2020-01-13T10:57:07.510Z</updated>
    
    <content type="html"><![CDATA[<p>打开F12开发者模式</p><p>右键浏览器的刷新按钮，会出现三个选项：正常重新加载，硬性重新加载，清空缓存并硬性重新加载</p><a id="more"></a><p>正常重新加载 Ctrl+R：正常重新加载。</p><p>硬性重新加载：Ctrl+Shift+R:浅层次的清除历史记录，但不一定缓存完全清除。(Ctrl+F5)同理。</p><p>清空缓存并硬性重新加载：可以深层次的清除所有的缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开F12开发者模式&lt;/p&gt;
&lt;p&gt;右键浏览器的刷新按钮，会出现三个选项：正常重新加载，硬性重新加载，清空缓存并硬性重新加载&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器搭建" scheme="https://qaqu.net/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器搭建" scheme="https://qaqu.net/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo4.2图片显示问题，修复hexo-asset-image</title>
    <link href="https://qaqu.net/2020-1-12-Hexo4.2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>https://qaqu.net/2020-1-12-Hexo4.2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-01-12T07:28:59.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h1><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>但是这个插件的内容需要修改【不然可能会出Bug】</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link &#x3D; data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">&#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">   !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">  &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">  &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">  var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">  &#125;);</span><br><span class="line">  if(srcArray.length &gt; 1)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">  $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">console.info&amp;&amp;console.info($(this));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打开_config.yml文件，修改下述内容</p><p>post_asset_folder: true</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插件安装与配置&quot;&gt;&lt;a href=&quot;#插件安装与配置&quot; class=&quot;headerlink&quot; title=&quot;插件安装与配置&quot;&gt;&lt;/a&gt;插件安装与配置&lt;/h1&gt;&lt;p&gt;首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;CodeFalling&amp;#x2F;hexo-asset-image --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是这个插件的内容需要修改【不然可能会出Bug】&lt;/p&gt;
&lt;p&gt;打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://qaqu.net/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://qaqu.net/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo升级命令</title>
    <link href="https://qaqu.net/2020-1-12-Hexo%E5%8D%87%E7%BA%A7%E5%91%BD%E4%BB%A4/"/>
    <id>https://qaqu.net/2020-1-12-Hexo%E5%8D%87%E7%BA%A7%E5%91%BD%E4%BB%A4/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-01-12T07:08:16.617Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo版本升级可以通过npm实现，相关命令如下：<br>先全局升级hexo-cli：-g表示全局升级。hexo本身是一个静态博客生成工具，具备编译Markdown、拼接主题模板、生成 HTML、上传 Git 等基本功能。hexo-cli能够将这些功能封装为命令，提供给用户通过hexo server / hexo deploy等命令调用的模块。CLI = Command Line Interface命令行界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><ol><li>npm-check检查更新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure><ol start="2"><li>npm-upgrade更新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li>更新全局包：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; -g</span><br></pre></td></tr></table></figure><ol start="4"><li>更新生产环境依赖包：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; --save</span><br></pre></td></tr></table></figure><p>save参数：npm install X –save:</p><p>会把X包安装到node_modules目录中<br>会在package.json的dependencies属性下添加X<br>之后运行npm install命令时，会自动安装X到node_modules目录中<br>如果不加save参数的话，之后把X包安装到node_modules目录中，不会添加到dependencies文件中。再查看hexo文件夹下面的dependencies文件,可以看到hexo的版本已经更新了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo版本升级可以通过npm实现，相关命令如下：&lt;br&gt;先全局升级hexo-cli：-g表示全局升级。hexo本身是一个静态博客生成工具，具备编译Markdown、拼接主题模板、生成 HTML、上传 Git 等基本功能。hexo-cli能够将这些功能封装为命令，提供给用户通过hexo server / hexo deploy等命令调用的模块。CLI = Command Line Interface命令行界面。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;npm-check检查更新&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g npm-check&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm-check&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;npm-upgrade更新&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g npm-upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm-upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://qaqu.net/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://qaqu.net/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Win2012（或2016）服务器IIS8（或IIS10）实现http自动跳转https</title>
    <link href="https://qaqu.net/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/"/>
    <id>https://qaqu.net/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/</id>
    <published>2020-01-10T16:00:00.000Z</published>
    <updated>2020-01-11T10:08:22.025Z</updated>
    
    <content type="html"><![CDATA[<p>1、安装ssl证书</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/1.png" class><a id="more"></a><p>2、导入相关证书</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/2.png" class><p>3、进入相关网站，绑定HTTPS主机头到网站。</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/3.png" class><p>4、安装URL重写工具。</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/4.png" class><p>5、在想要跳转的网站上，双击“url 重写”</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/5.png" class><p>6、添加空白规则</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/6.png" class><p>7、添加url规则<br>名称：http to https<br>模式：(.*)<br>展开条件</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/7.png" class><p>8、继续添加URL规则<br>添加条件<br>条件输入：{HTTPS}<br>模式：^OFF$</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/8.png" class><p>9、继续添加URL规则<br>操作类型：重定向<br>重定向URL：https://{HTTP_HOST}/{R:1}<br>重定向类型：已找到(302) 或 参阅其它(303)</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/9.png" class><p>10、最后一步，应用</p><img src="/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/10.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、安装ssl证书&lt;/p&gt;
&lt;img src=&quot;/2020-1-11-Win2012%EF%BC%88%E6%88%962016%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8IIS8%EF%BC%88%E6%88%96IIS10%EF%BC%89%E5%AE%9E%E7%8E%B0http%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AChttps/1.png&quot; class&gt;
    
    </summary>
    
    
      <category term="服务器搭建" scheme="https://qaqu.net/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器搭建" scheme="https://qaqu.net/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu上opencv3.2和opencv_contrib安装中遇到的错误记录(cuda9.0)</title>
    <link href="https://qaqu.net/2019-12-18-ubuntu%E4%B8%8Aopencv3.2%E5%92%8Copencv_contrib%E5%AE%89%E8%A3%85%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <id>https://qaqu.net/2019-12-18-ubuntu%E4%B8%8Aopencv3.2%E5%92%8Copencv_contrib%E5%AE%89%E8%A3%85%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</id>
    <published>2019-12-17T16:00:00.000Z</published>
    <updated>2020-01-11T10:10:11.355Z</updated>
    
    <content type="html"><![CDATA[<p>改正版opencv_contrib 3.2下载地址</p><p><a href="https://blog.csdn.net/qsczse943062710/article/details/79181831" target="_blank" rel="noopener">https://blog.csdn.net/qsczse943062710/article/details/79181831</a></p><p>解压opencv-3.2.0，比如为/home/XXX/opencv-3.2.0</p><p>解压我给的opencv_contrib-3.2.0至opencv-3.2.0的目录下（解压完后路径为/home/XXX/opencv-3.2.0/opencv_contrib-3.2.0），并在此处新建一个build文件夹（路径为/home/XXX/opencv-3.2.0/build）</p><p>进入build，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D OPENCV_EXTRA_MODULES_PATH&#x3D;&#x2F;home&#x2F;lyp&#x2F;Data&#x2F;Downtown&#x2F;opencv-3.2.0&#x2F;opencv_contrib&#x2F;modules -D CUDA_GENERATION&#x3D;Kepler ..</span><br></pre></td></tr></table></figure><p>因为是cuda9.0不再支持2.0架构所以要加上-D CUDA_GENERATION=Kepler</p><a id="more"></a><h1 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h1><h2 id="第一个错误"><a href="#第一个错误" class="headerlink" title="第一个错误"></a>第一个错误</h2><p>fatal error: LAPACKE_H_PATH-NOTFOUND/lapacke.h: No such file or directory #include “LAPACKE_H_PATH-NOTFOUND/lapacke.h” </p><p>原因：未找到lapacke.h文件</p><p>方法： </p><p>sudo apt-get install liblapacke-dev checkinstall </p><p>修改出现问题的文件，例如我的文件是 </p><p>opencv-3.2.0/build/opencv_lapack.h </p><p>将第二行中的#include”LAPACKE_H_PATH-NOTFOUND/lapacke.h” 修改为#include”lapacke.h”即可</p><h2 id="第二个错误"><a href="#第二个错误" class="headerlink" title="第二个错误"></a>第二个错误</h2><p>使用Cmake编译opencv源码遇到如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMake Error: The following variables are used in this project, but they are set to NOTFOUND.</span><br><span class="line">Please set them or make sure they are set and tested correctly in the CMake files:</span><br><span class="line">CUDA_nppi_LIBRARY (ADVANCED)</span><br><span class="line">linked by target &quot;opencv_cudev&quot; in directory D:&#x2F;Cproject&#x2F;opencv&#x2F;opencv&#x2F;sources&#x2F;modules&#x2F;cudev</span><br><span class="line">linked by target &quot;opencv_cudev&quot; in directory D:&#x2F;Cproject&#x2F;opencv&#x2F;opencv&#x2F;sources&#x2F;modules&#x2F;cudev</span><br></pre></td></tr></table></figure><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find_cuda_helper_libs(nppial)</span><br><span class="line">find_cuda_helper_libs(nppicc)</span><br><span class="line">find_cuda_helper_libs(nppicom)</span><br><span class="line">find_cuda_helper_libs(nppidei)</span><br><span class="line">find_cuda_helper_libs(nppif)</span><br><span class="line">find_cuda_helper_libs(nppig)</span><br><span class="line">find_cuda_helper_libs(nppim)</span><br><span class="line">find_cuda_helper_libs(nppist)</span><br><span class="line">find_cuda_helper_libs(nppisu)</span><br><span class="line">find_cuda_helper_libs(nppitc)</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>找到行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CUDA_npp_LIBRARY &quot;$&#123;CUDA_nppc_LIBRARY&#125;;$&#123;CUDA_nppi_LIBRARY&#125;;$&#123;CUDA_npps_LIBRARY&#125;&quot;)</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CUDA_npp_LIBRARY &quot;$&#123;CUDA_nppc_LIBRARY&#125;;$&#123;CUDA_nppial_LIBRARY&#125;;$&#123;CUDA_nppicc_LIBRARY&#125;;$&#123;CUDA_nppicom_LIBRARY&#125;;$&#123;CUDA_nppidei_LIBRARY&#125;;$&#123;CUDA_nppif_LIBRARY&#125;;$&#123;CUDA_nppig_LIBRARY&#125;;$&#123;CUDA_nppim_LIBRARY&#125;;$&#123;CUDA_nppist_LIBRARY&#125;;$&#123;CUDA_nppisu_LIBRARY&#125;;$&#123;CUDA_nppitc_LIBRARY&#125;;$&#123;CUDA_npps_LIBRARY&#125;&quot;)</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unset(CUDA_nppial_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppicc_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppicom_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppidei_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppif_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppig_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppim_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppist_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppisu_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppitc_LIBRARY CACHE)</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>找到文件OpenCVDetectCUDA.cmake</p><p>修改以下几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> set(__cuda_arch_ptx &quot;&quot;)</span><br><span class="line"> if(CUDA_GENERATION STREQUAL &quot;Fermi&quot;)</span><br><span class="line">   set(__cuda_arch_bin &quot;2.0&quot;)</span><br><span class="line"> elseif(CUDA_GENERATION STREQUAL &quot;Kepler&quot;)</span><br><span class="line">   set(__cuda_arch_bin &quot;3.0 3.5 3.7&quot;)</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">set(__cuda_arch_ptx &quot;&quot;)</span><br><span class="line">if(CUDA_GENERATION STREQUAL &quot;Kepler&quot;)</span><br><span class="line">  set(__cuda_arch_bin &quot;3.0 3.5 3.7&quot;)</span><br><span class="line">elseif(CUDA_GENERATION STREQUAL &quot;Maxwell&quot;)</span><br><span class="line">  set(__cuda_arch_bin &quot;5.0 5.2&quot;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cuda_fp16.h&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;改正版opencv_contrib 3.2下载地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qsczse943062710/article/details/79181831&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qsczse943062710/article/details/79181831&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解压opencv-3.2.0，比如为/home/XXX/opencv-3.2.0&lt;/p&gt;
&lt;p&gt;解压我给的opencv_contrib-3.2.0至opencv-3.2.0的目录下（解压完后路径为/home/XXX/opencv-3.2.0/opencv_contrib-3.2.0），并在此处新建一个build文件夹（路径为/home/XXX/opencv-3.2.0/build）&lt;/p&gt;
&lt;p&gt;进入build，执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cmake -D CMAKE_BUILD_TYPE&amp;#x3D;Release -D CMAKE_INSTALL_PREFIX&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local -D OPENCV_EXTRA_MODULES_PATH&amp;#x3D;&amp;#x2F;home&amp;#x2F;lyp&amp;#x2F;Data&amp;#x2F;Downtown&amp;#x2F;opencv-3.2.0&amp;#x2F;opencv_contrib&amp;#x2F;modules -D CUDA_GENERATION&amp;#x3D;Kepler ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为是cuda9.0不再支持2.0架构所以要加上-D CUDA_GENERATION=Kepler&lt;/p&gt;
    
    </summary>
    
    
      <category term="opencv" scheme="https://qaqu.net/categories/opencv/"/>
    
    
      <category term="opencv" scheme="https://qaqu.net/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>报错caffe_ mexa64 undefined symbol</title>
    <link href="https://qaqu.net/2019-9-19-%E6%8A%A5%E9%94%99caffe_%20mexa64%20undefined%20symbol/"/>
    <id>https://qaqu.net/2019-9-19-%E6%8A%A5%E9%94%99caffe_%20mexa64%20undefined%20symbol/</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-12-20T08:42:10.367Z</updated>
    
    <content type="html"><![CDATA[<p>报错Invalid MEX-file<br>‘/home/lyp/Data/Downtown/LSART/LSART/caffe/matlab/+caffe/private/caffe_.mexa64’:<br>/home/lyp/Data/Matlab2014a/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6:<br>version `GLIBCXX_3.4.21’ not found (required by<br>/home/lyp/Data/Downtown/LSART/LSART/caffe/matlab/+caffe/private/caffe_.mexa64)</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在目录下~&#x2F;Data&#x2F;Matlab2014a&#x2F;sys&#x2F;os&#x2F;glnxa64 更改软链接指向</span><br><span class="line">libstdc++.so.6 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6</span><br></pre></td></tr></table></figure><p>用matlab执行.m文件时报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invalid MEX-file &#39;&#x2F;home&#x2F;dorothy&#x2F;environment&#x2F;caffe-master&#x2F;matlab&#x2F;+caffe&#x2F;private</span><br><span class="line">&#x2F;caffe_.mexa64&#39;: &#x2F;home&#x2F;dorothy&#x2F;environment&#x2F;caffe-master&#x2F;matlab&#x2F;+caffe&#x2F;private</span><br><span class="line">&#x2F;caffe_.mexa64: undefined symbol: </span><br><span class="line">_ZN2cv8imencodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>将usr/local/MATLAB/R2015b/bin/glnxa64中，以下三个文件删掉，最好备份一下以防万一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libopencv_core.so.2.4</span><br><span class="line">libopencv_highgui.so.2.4</span><br><span class="line">libopencv_imgproc.so.2.4</span><br></pre></td></tr></table></figure><p>/usr/lib/libharfbuzz.so.0: undefined symbol: FT_Get_Var_Blend_Coordinates问题的解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf  &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libfreetype.so.6 &#x2F;opt&#x2F;MATLAB&#x2F;R2012a&#x2F;bin&#x2F;glnx86&#x2F;libfreetype.so.6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;报错Invalid MEX-file&lt;br&gt;‘/home/lyp/Data/Downtown/LSART/LSART/caffe/matlab/+caffe/private/caffe_.mexa64’:&lt;br&gt;/home/lyp/Data/Matlab2014a/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6:&lt;br&gt;version `GLIBCXX_3.4.21’ not found (required by&lt;br&gt;/home/lyp/Data/Downtown/LSART/LSART/caffe/matlab/+caffe/private/caffe_.mexa64)&lt;/p&gt;
    
    </summary>
    
    
      <category term="caffe" scheme="https://qaqu.net/categories/caffe/"/>
    
    
      <category term="matcaffe" scheme="https://qaqu.net/tags/matcaffe/"/>
    
  </entry>
  
  <entry>
    <title>dpkg错误</title>
    <link href="https://qaqu.net/2019-8-8-dpkg%E9%94%99%E8%AF%AF/"/>
    <id>https://qaqu.net/2019-8-8-dpkg%E9%94%99%E8%AF%AF/</id>
    <published>2019-08-07T16:00:00.000Z</published>
    <updated>2019-12-20T08:42:31.651Z</updated>
    
    <content type="html"><![CDATA[<p>在输入sudo apt-get update后发现终端提示：</p><blockquote><p>E: 无法获得锁 /var/lib/dpkg/lock-frontend - open (11: 资源暂时不可用)<br>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</p></blockquote><a id="more"></a><h1 id="解决方案一："><a href="#解决方案一：" class="headerlink" title="解决方案一："></a>解决方案一：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep apt</span><br></pre></td></tr></table></figure><p>然后执行：<code>sudo kill</code> 进程号</p><h1 id="解决方案二："><a href="#解决方案二：" class="headerlink" title="解决方案二："></a>解决方案二：</h1><p>有一种情况是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</span><br></pre></td></tr></table></figure><p>但我遇到的情况是：E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在输入sudo apt-get update后发现终端提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;E: 无法获得锁 /var/lib/dpkg/lock-frontend - open (11: 资源暂时不可用)&lt;br&gt;E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://qaqu.net/categories/linux/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装caffe及遇到的问题总结</title>
    <link href="https://qaqu.net/2019-8-7-Ubuntu16.04%E5%AE%89%E8%A3%85caffe%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://qaqu.net/2019-8-7-Ubuntu16.04%E5%AE%89%E8%A3%85caffe%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-12-20T08:44:31.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础库安装"><a href="#基础库安装" class="headerlink" title="基础库安装"></a>基础库安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler libopenblas-dev</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libopenblas-dev</span><br></pre></td></tr></table></figure><h1 id="克隆caffe代码到本地"><a href="#克隆caffe代码到本地" class="headerlink" title="克隆caffe代码到本地"></a>克隆caffe代码到本地</h1><p>git clone <a href="https://github.com/BVLC/caffe.git" target="_blank" rel="noopener">https://github.com/BVLC/caffe.git</a></p><h1 id="修改Makefile-config、Makefile"><a href="#修改Makefile-config、Makefile" class="headerlink" title="修改Makefile.config、Makefile"></a>修改Makefile.config、Makefile</h1><p>Makefile.config中CUDA_ARCH变量配置。如果cuda 的版本号&gt;=9.0，则在该文件夹下找到CUDA_ARCH变量，并把：</p><p>gencode arch=compute_20,code=sm_20 \ </p><p>gencode arch=compute_20,code=sm_21</p><p>两行注释掉</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>解决办法是依据出现错误的顺序而给出的，为了方便，可以直接先执行所有解决办法后再安装caffe。</p><ol><li>./include/caffe/common.hpp:5:27: fatal error: gflags/gflags.h: No such file or directory</li></ol><p>解决办法：sudo apt-get install libgflags-dev</p><ol start="2"><li>./include/caffe/util/mkl_alternate.hpp:14:19: fatal error: cblas.h: No such file or directory</li></ol><p>解决办法：sudo apt-get install libblas-dev</p><ol start="3"><li>./include/caffe/util/hdf5.hpp:6:18: fatal error: hdf5.h: No such file or directory</li></ol><p>解决办法：在Makefile.config找到以下行并添加蓝色部分</p><p>INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include <font color="Blue">/usr/include/hdf5/serial</font> </p><p>LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib <font color="Blue">/usr/lib/x86_64-linux-gnu/hdf5/serial</font></p><ol start="4"><li>./include/caffe/util/db_lmdb.hpp:8:18: fatal error: lmdb.h: No such file or directory</li></ol><p>解决办法：sudo apt install liblmdb-dev</p><ol start="5"><li>/usr/bin/ld: cannot find -lcblas<br> /usr/bin/ld: cannot find -latlas</li></ol><p>解决办法：sudo apt install libatlas-base-dev</p><ol start="6"><li>./include/caffe/common.hpp:6:26: fatal error: glog/logging.h: No such file or directory</li></ol><p>解决方法：sudo apt-get install libgoogle-glog-dev</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础库安装&quot;&gt;&lt;a href=&quot;#基础库安装&quot; class=&quot;headerlink&quot; title=&quot;基础库安装&quot;&gt;&lt;/a&gt;基础库安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler libopenblas-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install --no-install-recommends libboost-all-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libopenblas-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;克隆caffe代码到本地&quot;&gt;&lt;a href=&quot;#克隆caffe代码到本地&quot; class=&quot;headerlink&quot; title=&quot;克隆caffe代码到本地&quot;&gt;&lt;/a&gt;克隆caffe代码到本地&lt;/h1&gt;&lt;p&gt;git clone &lt;a href=&quot;https://github.com/BVLC/caffe.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BVLC/caffe.git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;修改Makefile-config、Makefile&quot;&gt;&lt;a href=&quot;#修改Makefile-config、Makefile&quot; class=&quot;headerlink&quot; title=&quot;修改Makefile.config、Makefile&quot;&gt;&lt;/a&gt;修改Makefile.config、Makefile&lt;/h1&gt;&lt;p&gt;Makefile.config中CUDA_ARCH变量配置。如果cuda 的版本号&amp;gt;=9.0，则在该文件夹下找到CUDA_ARCH变量，并把：&lt;/p&gt;
&lt;p&gt;gencode arch=compute_20,code=sm_20 \ &lt;/p&gt;
&lt;p&gt;gencode arch=compute_20,code=sm_21&lt;/p&gt;
&lt;p&gt;两行注释掉&lt;/p&gt;
    
    </summary>
    
    
      <category term="caffe" scheme="https://qaqu.net/categories/caffe/"/>
    
    
      <category term="caffe" scheme="https://qaqu.net/tags/caffe/"/>
    
  </entry>
  
  <entry>
    <title>提速 git push速度</title>
    <link href="https://qaqu.net/2019-8-7-%E6%8F%90%E9%80%9F%20git%20push%E9%80%9F%E5%BA%A6/"/>
    <id>https://qaqu.net/2019-8-7-%E6%8F%90%E9%80%9F%20git%20push%E9%80%9F%E5%BA%A6/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-12-20T08:42:47.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理服务器提速"><a href="#代理服务器提速" class="headerlink" title="代理服务器提速"></a>代理服务器提速</h1><p>如果你有shadowsocks的socket5代理，那么可以使用下面两条语句提速</p><p>前提是你的代理已经在运行</p><p>速度提升非常明显，之前几KB变成1-2MB的速度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理服务器提速&quot;&gt;&lt;a href=&quot;#代理服务器提速&quot; class=&quot;headerlink&quot; title=&quot;代理服务器提速&quot;&gt;&lt;/a&gt;代理服务器提速&lt;/h1&gt;&lt;p&gt;如果你有shadowsocks的socket5代理，那么可以使用下面两条语句提速&lt;/p&gt;
&lt;p&gt;前提是你的代理已经在运行&lt;/p&gt;
&lt;p&gt;速度提升非常明显，之前几KB变成1-2MB的速度。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global http.proxy &amp;#39;socks5:&amp;#x2F;&amp;#x2F;127.0.0.1:1080&amp;#39; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global https.proxy &amp;#39;socks5:&amp;#x2F;&amp;#x2F;127.0.0.1:1080&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://qaqu.net/categories/git/"/>
    
    
      <category term="git" scheme="https://qaqu.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu设置系统环境变量和开机自启动</title>
    <link href="https://qaqu.net/2019-8-7-Ubuntu18.04%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/"/>
    <id>https://qaqu.net/2019-8-7-Ubuntu18.04%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-12-20T08:42:55.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Ubuntu系统环境变量详解"><a href="#一、Ubuntu系统环境变量详解" class="headerlink" title="一、Ubuntu系统环境变量详解"></a>一、Ubuntu系统环境变量详解</h1><p>参考这篇文章，讲的非常详细</p><h1 id="二、开机自启动"><a href="#二、开机自启动" class="headerlink" title="二、开机自启动"></a>二、开机自启动</h1><p>在Linux下设置软件开机自动有三种方式：</p><h2 id="1、-自动启动应用程序——rc-local脚本"><a href="#1、-自动启动应用程序——rc-local脚本" class="headerlink" title="1、 自动启动应用程序——rc.local脚本"></a>1、 自动启动应用程序——rc.local脚本</h2><h2 id="2、-自动启动服务——update-rc-d"><a href="#2、-自动启动服务——update-rc-d" class="headerlink" title="2、 自动启动服务——update-rc.d"></a>2、 自动启动服务——update-rc.d</h2><h2 id="3、-启动应用程序首选项"><a href="#3、-启动应用程序首选项" class="headerlink" title="3、 启动应用程序首选项"></a>3、 启动应用程序首选项</h2><h2 id="4、-使用Systemd"><a href="#4、-使用Systemd" class="headerlink" title="4、 使用Systemd"></a>4、 使用Systemd</h2><a id="more"></a><p>下面来介绍这四种方式：</p><h1 id="1、自动启动应用程序——rc-local脚本"><a href="#1、自动启动应用程序——rc-local脚本" class="headerlink" title="1、自动启动应用程序——rc.local脚本"></a>1、自动启动应用程序——rc.local脚本</h1><p>rc.local脚本是一个Ubuntu开机后会自动执行的脚本，在该脚本内添加命令行，开机时会自动执行。</p><p>脚本路径/etc/rc.local</p><p>需要root权限才能修改。</p><p>添加命令</p><p>打开文件，在exit 0前添加要执行的命令，里面可以直接写命令或者执行Shell脚本文件sh。</p><p>如下，添加的5行命令</p><p>第1,2行是用于输出log 的</p><p>第4,5行，是启动程序的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.:</span><br><span class="line">&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;XX-Net-3.10.4&#x2F;xx_net.sh 1&gt;&gt; &#x2F;etc&#x2F;mylog   # send stderr from rc.local to a log file </span><br><span class="line">2&gt;&amp;1   # send stdout to the same log file </span><br><span class="line">set -x    # tell sh to display commands before execution </span><br><span class="line">sudo miredo</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;XX-Net-3.10.4&#x2F;xx_net.sh start</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>这里的设置开机自动执行的sudo命令也是可以执行的</p><p>rc.local命令不执行，程序不启动的问题</p><p>1、如下面所示，添加log，查看程序执行情况</p><p>2、rc.local文件头部/bin/sh修改为/bin/bash</p><p>3、如果是执行sh文件，那么要赋予执行权限sudo chmod +x xxx.sh，然后启动时加上sudo sh xxx.sh</p><h1 id="2、自动启动服务——update-rc-d"><a href="#2、自动启动服务——update-rc-d" class="headerlink" title="2、自动启动服务——update-rc.d"></a>2、自动启动服务——update-rc.d</h1><p>使用 update-rc.d增加开机启动服务，给Ubuntu添加一个开机启动脚本，操作如下：</p><p>1、新建个脚本文件new_service.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># command content</span><br><span class="line">  </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>2、设置权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 new_service.sh</span><br><span class="line">#或者</span><br><span class="line">sudo chmod +x new_service.sh</span><br></pre></td></tr></table></figure><p>3、把脚本放置到启动目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv new_service.sh &#x2F;etc&#x2F;init.d&#x2F;</span><br></pre></td></tr></table></figure><p>4、将脚本添加到开机启动脚本</p><p>执行如下指令，在这里90表明一个优先级，越高表示执行的越晚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;init.d&#x2F;</span><br><span class="line">sudo update-rc.d new_service.sh defaults 90</span><br></pre></td></tr></table></figure><p>5、移除开机启动脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d -f new_service.sh remove</span><br></pre></td></tr></table></figure><p>6、通过sysv-rc-conf来管理上面启动服务的启动级别等，是否是开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysv-rc-conf</span><br></pre></td></tr></table></figure><p>7、update-rc.d的详细参数</p><p>使用update-rc.d命令需要指定脚本名称和一些参数，它的格式看起来是这样的（需要在 root 权限下）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d [-n] [-f] &lt;basename&gt; remove</span><br><span class="line">update-rc.d [-n] &lt;basename&gt; defaults</span><br><span class="line">update-rc.d [-n] &lt;basename&gt; disable|enable [S|2|3|4|5]</span><br><span class="line">update-rc.d &lt;basename&gt; start|stop &lt;NN&gt; &lt;runlevels&gt;</span><br></pre></td></tr></table></figure><p>-n: not really</p><p>-f: force</p><p>disable|enable：代表脚本还在/etc/init.d中，并设置当前状态是手动启动还是自动启动。</p><p>start|stop：代表脚本还在/etc/init.d中，开机，并设置当前状态是开始运行还是停止运行。（启用后可配置开始运行与否）</p><p>NN：是一个决定启动顺序的两位数字值。（例如90大于80，因此80对应的脚本先启动或先停止）</p><p>runlevels：则指定了运行级别。</p><p>实例：</p><p>（1）、添加一个新的启动脚本sample_init_script，并且指定为默认启动顺序、默认运行级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d sample_init_script defaults</span><br><span class="line">上一条命令等效于（中间是一个英文句点符号）：</span><br><span class="line">update-rc.d sample_init_script start 20 2 3 4 5 . stop 20 0 1 6</span><br></pre></td></tr></table></figure><p>（2）、安装一个启动脚本sample_init_script，指定默认运行级别，但启动顺序为50：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d sample_init_script defaults 50</span><br></pre></td></tr></table></figure><p>（3）、安装两个启动脚本A、B，让A先于B启动，后于B停止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d A 10 40</span><br><span class="line">update-rc.d B 20 30</span><br></pre></td></tr></table></figure><p>（4）、删除一个启动脚本sample_init_script，如果脚本不存在则直接跳过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d -f sample_init_script remove</span><br></pre></td></tr></table></figure><p>这一条命令实际上做的就是一一删除所有位于/etc/rcX.d目录下指向/etc/init.d中sample_init_script的链接（可能存在多个链接文件），update-rc.d只不过简化了这一步骤。</p><p>（5）禁止Apache/MySQL相关组件开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d -f apache2 remove</span><br><span class="line">update-rc.d -f mysql remove</span><br></pre></td></tr></table></figure><p>8、服务的启动停止状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service xxx status</span><br><span class="line">sudo service xxx start</span><br><span class="line">sudo service xxx stop</span><br><span class="line">sudo service xxx restart</span><br></pre></td></tr></table></figure><p>9、查看全部服务列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service --status-all</span><br></pre></td></tr></table></figure><h1 id="3、启动应用程序首选项"><a href="#3、启动应用程序首选项" class="headerlink" title="3、启动应用程序首选项"></a>3、启动应用程序首选项</h1><p>可以通过在控制台运行 gnome-session-properties</p><h1 id="4、使用Systemd"><a href="#4、使用Systemd" class="headerlink" title="4、使用Systemd"></a>4、使用Systemd</h1><p>Systemd 的使用有些复杂，未亲自尝试。有兴趣的小伙伴，可以来这里学习一下Systemd 入门教程：命令篇</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Ubuntu系统环境变量详解&quot;&gt;&lt;a href=&quot;#一、Ubuntu系统环境变量详解&quot; class=&quot;headerlink&quot; title=&quot;一、Ubuntu系统环境变量详解&quot;&gt;&lt;/a&gt;一、Ubuntu系统环境变量详解&lt;/h1&gt;&lt;p&gt;参考这篇文章，讲的非常详细&lt;/p&gt;
&lt;h1 id=&quot;二、开机自启动&quot;&gt;&lt;a href=&quot;#二、开机自启动&quot; class=&quot;headerlink&quot; title=&quot;二、开机自启动&quot;&gt;&lt;/a&gt;二、开机自启动&lt;/h1&gt;&lt;p&gt;在Linux下设置软件开机自动有三种方式：&lt;/p&gt;
&lt;h2 id=&quot;1、-自动启动应用程序——rc-local脚本&quot;&gt;&lt;a href=&quot;#1、-自动启动应用程序——rc-local脚本&quot; class=&quot;headerlink&quot; title=&quot;1、 自动启动应用程序——rc.local脚本&quot;&gt;&lt;/a&gt;1、 自动启动应用程序——rc.local脚本&lt;/h2&gt;&lt;h2 id=&quot;2、-自动启动服务——update-rc-d&quot;&gt;&lt;a href=&quot;#2、-自动启动服务——update-rc-d&quot; class=&quot;headerlink&quot; title=&quot;2、 自动启动服务——update-rc.d&quot;&gt;&lt;/a&gt;2、 自动启动服务——update-rc.d&lt;/h2&gt;&lt;h2 id=&quot;3、-启动应用程序首选项&quot;&gt;&lt;a href=&quot;#3、-启动应用程序首选项&quot; class=&quot;headerlink&quot; title=&quot;3、 启动应用程序首选项&quot;&gt;&lt;/a&gt;3、 启动应用程序首选项&lt;/h2&gt;&lt;h2 id=&quot;4、-使用Systemd&quot;&gt;&lt;a href=&quot;#4、-使用Systemd&quot; class=&quot;headerlink&quot; title=&quot;4、 使用Systemd&quot;&gt;&lt;/a&gt;4、 使用Systemd&lt;/h2&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://qaqu.net/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="https://qaqu.net/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Opencv的卸载并安装2.4版本(无cuda+cuda9.0)</title>
    <link href="https://qaqu.net/2019-8-6-Opencv%E7%9A%84%E5%8D%B8%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%852.4%E7%89%88%E6%9C%AC/"/>
    <id>https://qaqu.net/2019-8-6-Opencv%E7%9A%84%E5%8D%B8%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%852.4%E7%89%88%E6%9C%AC/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-12-20T08:44:57.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看安装的opencv版本"><a href="#查看安装的opencv版本" class="headerlink" title="查看安装的opencv版本"></a>查看安装的opencv版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br></pre></td></tr></table></figure><h1 id="卸载旧版本opencv"><a href="#卸载旧版本opencv" class="headerlink" title="卸载旧版本opencv"></a>卸载旧版本opencv</h1><p>进入到原来安装opencv的build目录，执行卸载操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-3.2.0&#x2F;build</span><br><span class="line">sudo make uninstall</span><br><span class="line">cd ..</span><br><span class="line">sudo rm -r build</span><br><span class="line"> </span><br><span class="line">sudo rm -r &#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv2 &#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv &#x2F;usr&#x2F;include&#x2F;opencv &#x2F;usr&#x2F;include&#x2F;opencv2 &#x2F;usr&#x2F;local&#x2F;share&#x2F;opencv &#x2F;usr&#x2F;local&#x2F;share&#x2F;OpenCV &#x2F;usr&#x2F;share&#x2F;opencv &#x2F;usr&#x2F;share&#x2F;OpenCV &#x2F;usr&#x2F;local&#x2F;bin&#x2F;opencv* &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv*</span><br><span class="line"> </span><br><span class="line">cd &#x2F;usr</span><br><span class="line">sudo find . -name &quot;*opencv*&quot; | xargs sudo rm -rf</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="安装opencv2-4"><a href="#安装opencv2-4" class="headerlink" title="安装opencv2.4"></a>安装opencv2.4</h1><ol><li>先从sourceforge上下载OpenCV的源码</li></ol><p><a href="http://jaist.dl.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.9/opencv-2.4.9.zip" target="_blank" rel="noopener">http://jaist.dl.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.9/opencv-2.4.9.zip</a></p><ol start="2"><li>解压到任意目录</li></ol><p>unzip opencv-2.4.9.zip</p><ol start="3"><li>进入源码目录，创建release目录</li></ol><p>cd opencv-2.4.9</p><p>mkdir release  </p><ol start="4"><li>可以看到在OpenCV目录下，有个CMakeLists.txt文件，需要事先安装一些软件</li></ol><p>sudo apt-get install build-essential cmake libgtk2.0-dev pkg-config python-dev python-numpy libavcodec-dev libavformat-dev libswscale-dev  </p><ol start="5"><li>进入release目录，安装OpenCV是所有的文件都会被放到这个release目录下</li></ol><p>cd release  </p><ol start="6"><li>cmake编译OpenCV源码，安装所有的lib文件都会被安装到/usr/local目录下</li></ol><p>不要cuda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D WITH_CUDA&#x3D;OFF ..</span><br></pre></td></tr></table></figure><p>不要ffmpeg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -D WITH_CUDA&#x3D;OFF -D WITH_FFMPEG&#x3D;OFF ..</span><br></pre></td></tr></table></figure><ol start="7"><li>安装</li></ol><p>sudo make install -j8</p><h1 id="强行将opencv2-4适配cuda9-0（cuda9-0不支持2-0架构）"><a href="#强行将opencv2-4适配cuda9-0（cuda9-0不支持2-0架构）" class="headerlink" title="强行将opencv2.4适配cuda9.0（cuda9.0不支持2.0架构）"></a>强行将opencv2.4适配cuda9.0（cuda9.0不支持2.0架构）</h1><p>解决方案如下：</p><p>1）.找到FindCUDA.cmake文件</p><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find_cuda_helper_libs(nppial)</span><br><span class="line">find_cuda_helper_libs(nppicc)</span><br><span class="line">find_cuda_helper_libs(nppicom)</span><br><span class="line">find_cuda_helper_libs(nppidei)</span><br><span class="line">find_cuda_helper_libs(nppif)</span><br><span class="line">find_cuda_helper_libs(nppig)</span><br><span class="line">find_cuda_helper_libs(nppim)</span><br><span class="line">find_cuda_helper_libs(nppist)</span><br><span class="line">find_cuda_helper_libs(nppisu)</span><br><span class="line">find_cuda_helper_libs(nppitc)</span><br></pre></td></tr></table></figure><p>2）.找到行</p><p>set(CUDA_npp_LIBRARY “${CUDA_nppc_LIBRARY};${CUDA_nppi_LIBRARY};${CUDA_npps_LIBRARY}”)</p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CUDA_npp_LIBRARY &quot;$&#123;CUDA_nppc_LIBRARY&#125;;$&#123;CUDA_nppial_LIBRARY&#125;;$&#123;CUDA_nppicc_LIBRARY&#125;;$&#123;CUDA_nppicom_LIBRARY&#125;;$&#123;CUDA_nppidei_LIBRARY&#125;;$&#123;CUDA_nppif_LIBRARY&#125;;$&#123;CUDA_nppig_LIBRARY&#125;;$&#123;CUDA_nppim_LIBRARY&#125;;$&#123;CUDA_nppist_LIBRARY&#125;;$&#123;CUDA_nppisu_LIBRARY&#125;;$&#123;CUDA_nppitc_LIBRARY&#125;;$&#123;CUDA_npps_LIBRARY&#125;&quot;)</span><br></pre></td></tr></table></figure><p>3）.找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unset(CUDA_nppial_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppicc_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppicom_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppidei_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppif_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppig_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppim_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppist_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppisu_LIBRARY CACHE)</span><br><span class="line">unset(CUDA_nppitc_LIBRARY CACHE)</span><br></pre></td></tr></table></figure><p>4）.找到文件OpenCVDetectCUDA.cmake</p><p>修改以下几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> set(__cuda_arch_ptx &quot;&quot;)</span><br><span class="line"> if(CUDA_GENERATION STREQUAL &quot;Fermi&quot;)</span><br><span class="line">   set(__cuda_arch_bin &quot;2.0&quot;)</span><br><span class="line"> elseif(CUDA_GENERATION STREQUAL &quot;Kepler&quot;)</span><br><span class="line">   set(__cuda_arch_bin &quot;3.0 3.5 3.7&quot;)</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">set(__cuda_arch_ptx &quot;&quot;)</span><br><span class="line">if(CUDA_GENERATION STREQUAL &quot;Kepler&quot;)</span><br><span class="line">  set(__cuda_arch_bin &quot;3.0 3.5 3.7&quot;)</span><br><span class="line">elseif(CUDA_GENERATION STREQUAL &quot;Maxwell&quot;)</span><br><span class="line">  set(__cuda_arch_bin &quot;5.0 5.2&quot;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>5）.cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cuda_fp16.h&gt;</span><br></pre></td></tr></table></figure><p>重新生成即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查看安装的opencv版本&quot;&gt;&lt;a href=&quot;#查看安装的opencv版本&quot; class=&quot;headerlink&quot; title=&quot;查看安装的opencv版本&quot;&gt;&lt;/a&gt;查看安装的opencv版本&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pkg-config --modversion opencv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;卸载旧版本opencv&quot;&gt;&lt;a href=&quot;#卸载旧版本opencv&quot; class=&quot;headerlink&quot; title=&quot;卸载旧版本opencv&quot;&gt;&lt;/a&gt;卸载旧版本opencv&lt;/h1&gt;&lt;p&gt;进入到原来安装opencv的build目录，执行卸载操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd opencv-3.2.0&amp;#x2F;build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make uninstall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rm -r build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rm -r &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;include&amp;#x2F;opencv2 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;include&amp;#x2F;opencv &amp;#x2F;usr&amp;#x2F;include&amp;#x2F;opencv &amp;#x2F;usr&amp;#x2F;include&amp;#x2F;opencv2 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;share&amp;#x2F;opencv &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;share&amp;#x2F;OpenCV &amp;#x2F;usr&amp;#x2F;share&amp;#x2F;opencv &amp;#x2F;usr&amp;#x2F;share&amp;#x2F;OpenCV &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;opencv* &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;lib&amp;#x2F;libopencv*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd &amp;#x2F;usr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo find . -name &amp;quot;*opencv*&amp;quot; | xargs sudo rm -rf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="opencv" scheme="https://qaqu.net/categories/opencv/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>LSART编译过程记录</title>
    <link href="https://qaqu.net/2019-8-6-LSART%E7%AE%97%E6%B3%95%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>https://qaqu.net/2019-8-6-LSART%E7%AE%97%E6%B3%95%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-12-20T08:45:14.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="modified-caffe的编译"><a href="#modified-caffe的编译" class="headerlink" title="modified caffe的编译"></a>modified caffe的编译</h1><p>ubuntu 18.04</p><p>cuda9.0</p><p>cudnn V3.0.8 for cuda 7.0</p><p>g++5.5 gcc5.5</p><p>opencv 2.4.11 (opencv的编译用g++4.9 gcc4.9)</p><p>不要修改原文件夹中的cudnn.hpp</p><h1 id="matcaffe编译"><a href="#matcaffe编译" class="headerlink" title="matcaffe编译"></a>matcaffe编译</h1><p>matlab2015b</p><p>g++4.9 gcc4.9</p><a id="more"></a><h1 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h1><p>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Invalid MEX-file</span><br><span class="line">&#39;&#x2F;home&#x2F;xw&#x2F;caffeBuild&#x2F;caffe-master&#x2F;matlab&#x2F;+caffe&#x2F;private&#x2F;caffe_.mexa64&#39;:</span><br><span class="line">&#x2F;home&#x2F;xw&#x2F;caffeBuild&#x2F;caffe-master&#x2F;matlab&#x2F;+caffe&#x2F;private&#x2F;caffe_.mexa64: undefined</span><br><span class="line">symbol:</span><br><span class="line">_ZN2cv8imencodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_11_InputArrayERSt6vectorIhSaIhEERKSB_IiSaIiEE</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>The problem here seems to be that caffe is compiled against the system version of opencv, but linking to the matlab version when running matcaffe. I was able to fix the problem by replacing the symbolic links for libopencv_[imgproc,core,highgui].so.2.4 in MATLAB/R2015a/bin/glnxa64 with a link for the versions in /usr/lib, as those were the three used by caffe. This fix probably breaks all the other opencv library files that were not replaced, so you might want to be careful or just replace them all.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libopencv_core.so.2.4 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libopencv_core.so.2.4.9</span><br><span class="line">libopencv_highgui.so.2.4 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libopencv_highgui.so.2.4.9</span><br><span class="line">libopencv_imgproc.so.2.4 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libopencv_imgproc.so.2.4.9</span><br></pre></td></tr></table></figure><p>PS:/usr/lib/x86_64-linux-gnu/ -&gt; /usr/local/lib/</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;modified-caffe的编译&quot;&gt;&lt;a href=&quot;#modified-caffe的编译&quot; class=&quot;headerlink&quot; title=&quot;modified caffe的编译&quot;&gt;&lt;/a&gt;modified caffe的编译&lt;/h1&gt;&lt;p&gt;ubuntu 18.04&lt;/p&gt;
&lt;p&gt;cuda9.0&lt;/p&gt;
&lt;p&gt;cudnn V3.0.8 for cuda 7.0&lt;/p&gt;
&lt;p&gt;g++5.5 gcc5.5&lt;/p&gt;
&lt;p&gt;opencv 2.4.11 (opencv的编译用g++4.9 gcc4.9)&lt;/p&gt;
&lt;p&gt;不要修改原文件夹中的cudnn.hpp&lt;/p&gt;
&lt;h1 id=&quot;matcaffe编译&quot;&gt;&lt;a href=&quot;#matcaffe编译&quot; class=&quot;headerlink&quot; title=&quot;matcaffe编译&quot;&gt;&lt;/a&gt;matcaffe编译&lt;/h1&gt;&lt;p&gt;matlab2015b&lt;/p&gt;
&lt;p&gt;g++4.9 gcc4.9&lt;/p&gt;
    
    </summary>
    
    
      <category term="目标跟踪" scheme="https://qaqu.net/categories/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/"/>
    
    
      <category term="LSART" scheme="https://qaqu.net/tags/LSART/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04CUDA8.0+cudnn+opencv3.1+ Caffe 安装步骤记录</title>
    <link href="https://qaqu.net/2019-8-6-Ubuntu16.04CUDA8.0%20cudnn%20opencv3.1%20Caffe%20%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://qaqu.net/2019-8-6-Ubuntu16.04CUDA8.0%20cudnn%20opencv3.1%20Caffe%20%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-12-20T08:44:46.548Z</updated>
    
    <content type="html"><![CDATA[<p>1、安装依赖包 </p><p>2、禁用 nouveau </p><p>3、配置环境变量 </p><p>4、下载 CUDA 8.0 </p><p>5、安装 CUDA 8.0 </p><p>6、验证 CUDA 8.0 是否安装成功 </p><p>7、安装 cudnn </p><p>8、安装 opencv3.1 </p><p>9、安装 caffe </p><p>10、安装 pycaffe notebook 接口环境</p><a id="more"></a><h1 id="第1步-安装依赖包"><a href="#第1步-安装依赖包" class="headerlink" title="第1步 安装依赖包"></a>第1步 安装依赖包</h1><p>安装后续步骤或环境必需的依赖包，依次输入以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line"></span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>有一定几率安装失败而导致后续步骤出现问题，所以要确保以上依赖包都已安装成功，验证方法就是重新运行安装命令，如验证 git cmake build-essential是否安装成功共则再次运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>界面提示如下则说明已成功安装依赖包，否则继续安装直到安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yhao@yhao-X550VB:~$ sudo apt-get install git cmake build-essential</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">build-essential 已经是最新版 (12.1ubuntu2)。</span><br><span class="line">cmake 已经是最新版 (3.5.1-1ubuntu3)。</span><br><span class="line">git 已经是最新版 (1:2.7.4-0ubuntu1.1)。</span><br><span class="line">下列软件包是自动安装的并且现在不需要了：</span><br><span class="line">  lib32gcc1 libc6-i386</span><br><span class="line">使用&#39;sudo apt autoremove&#39;来卸载它(它们)。</span><br><span class="line">升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 94 个软件包未被升级。</span><br></pre></td></tr></table></figure><h1 id="第2步-禁用-nouveau"><a href="#第2步-禁用-nouveau" class="headerlink" title="第2步 禁用 nouveau"></a>第2步 禁用 nouveau</h1><p>安装好依赖包后需要禁用 nouveau，只有在禁用掉 nouveau 后才能顺利安装 NVIDIA 显卡驱动，禁用方法就是在 /etc/modprobe.d/blacklist-nouveau.conf 文件中添加一条禁用命令，首先需要打开该文件，通过以下命令打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist-nouveau.conf</span><br></pre></td></tr></table></figure><p>打开后发现该文件中没有任何内容，写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau option nouveau modeset&#x3D;0</span><br></pre></td></tr></table></figure><p>保存时命令窗口可能会出现以下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">** (gedit:4243): WARNING **: Set document metadata failed: 不支持设置属性 metadata::gedit-position</span><br></pre></td></tr></table></figure><p>无视此提示～，保存后关闭文件，注意此时还需执行以下命令使禁用 nouveau 真正生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><h1 id="第3步-配置环境变量"><a href="#第3步-配置环境变量" class="headerlink" title="第3步 配置环境变量"></a>第3步 配置环境变量</h1><p>同样使用 gedit 命令打开配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>打开后在文件最后加入以下两行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;lib&#x2F;x86_64-linux-gnu:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>保存退出。</p><h1 id="第4步-下载-CUDA-8-0"><a href="#第4步-下载-CUDA-8-0" class="headerlink" title="第4步 下载 CUDA 8.0"></a>第4步 下载 CUDA 8.0</h1><p>进入 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a> ，依次选择 CUDA 类型然后下载即可。 </p><h1 id="第5步-安装-CUDA-8-0（关闭图形化没有必要）"><a href="#第5步-安装-CUDA-8-0（关闭图形化没有必要）" class="headerlink" title="第5步 安装 CUDA 8.0（关闭图形化没有必要）"></a>第5步 安装 CUDA 8.0（关闭图形化没有必要）</h1><p>第四步下载的1.4G的 CUDA中包含有 nvidia 显卡驱动，故此步骤 CUDA 的安装包括了 nvidia 显卡驱动的安装，此时注意你是否已经安装过 nvidia 显卡驱动，若无法保证已安装的 nvidia 显卡驱动一定正确，那就卸载掉之前安装的 nvidia 显卡驱动（卸载方法链接)，然后开始安装 CUDA 8.0；若可以保证已安装正确的 nvidia 显卡驱动，则直接开始安装 CUDA 8.0，在安装过程中选择不再安装 nvidia 显卡驱动。</p><p>为了方便开始安装过程的路径查找，把下载的 CUDA 安装文件移动到 HOME 路径下，然后通过 Ctrl + Alt + F1 进入文本模式，输入帐号密码登录，通过 Ctrl + Alt + F7 可返回图形化模式，在文本模式登录后首先关闭桌面服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>然后通过 Ctrl + Alt + F7 发现已无法成功返回图形化模式，说明桌面服务已成功关闭，注意此步对接下来的 nvidia 驱动安装尤为重要，必需确保桌面服务已关闭。</p><p>Ctrl + Alt + F1 进入文本模式，然后运行 CUDA 安装文件进行安装，之前我们已经把 CUDA 安装文件移动至 HOME，直接通过 sh 命令运行安装文件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_8.0.61_375.26_linux.run --no-opengl-libs</span><br></pre></td></tr></table></figure><p>其中 cuda_8.0.61_375.26_linux.run 是我的 CUDA 安装文件名，而你需替换为自己的 CUDA 安装文件名，若此时忘记可直接通过 ls 文件查看文件名，这也是我建议把 CUDA 安装文件移动到 HOME 下的另一个原因。</p><p>执行此命令约1分钟后会出现 0%信息，此时长按回车键让此百分比增长，直到100%，然后按照提示操作即可，先输入 accept ，然后让选择是否安装 nvidia 驱动，这里的选择对应第5步开头，若未安装则输入 “y”，若确保已安装正确驱动则输入“n”。</p><p>剩下的选择则都输入“y”确认安装或确认默认路径安装，开始安装，此时若出现安装失败提示则可能为未关闭桌面服务或在已安装 nvidia 驱动的情况下重复再次安装 nvidia 驱动，安装完成后输入重启命令重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启后登录进入系统，配置 CUDA 环境变量，与第3步相同，使用 gedit 命令打开配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>在该文件最后加入以下两行并保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>使该配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h1 id="第6步-验证-CUDA-8-0-是否安装成功"><a href="#第6步-验证-CUDA-8-0-是否安装成功" class="headerlink" title="第6步 验证 CUDA 8.0 是否安装成功"></a>第6步 验证 CUDA 8.0 是否安装成功</h1><p>分别执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;samples&#x2F;1_Utilities&#x2F;deviceQuery</span><br><span class="line"></span><br><span class="line">sudo make</span><br><span class="line"></span><br><span class="line">.&#x2F;deviceQuery</span><br></pre></td></tr></table></figure><p>若看到类似以下信息则说明 cuda 已安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;deviceQuery Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: &quot;GeForce GT 740M&quot;</span><br><span class="line">  CUDA Driver Version &#x2F; Runtime Version          8.0 &#x2F; 8.0</span><br><span class="line">  CUDA Capability Major&#x2F;Minor version number:    3.5</span><br><span class="line">  Total amount of global memory:                 2004 MBytes (2100953088 bytes)</span><br><span class="line">  ( 2) Multiprocessors, (192) CUDA Cores&#x2F;MP:     384 CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            1032 MHz (1.03 GHz)</span><br><span class="line">  Memory Clock rate:                             800 Mhz</span><br><span class="line">  Memory Bus Width:                              64-bit</span><br><span class="line">  L2 Cache Size:                                 524288 bytes</span><br><span class="line">  Maximum Texture Dimension Size (x,y,z)         1D&#x3D;(65536), 2D&#x3D;(65536, 65536), 3D&#x3D;(4096, 4096, 4096)</span><br><span class="line">  Maximum Layered 1D Texture Size, (num) layers  1D&#x3D;(16384), 2048 layers</span><br><span class="line">  Maximum Layered 2D Texture Size, (num) layers  2D&#x3D;(16384, 16384), 2048 layers</span><br><span class="line">  Total amount of constant memory:               65536 bytes</span><br><span class="line">  Total amount of shared memory per block:       49152 bytes</span><br><span class="line">  Total number of registers available per block: 65536</span><br><span class="line">  Warp size:                                     32</span><br><span class="line">  Maximum number of threads per multiprocessor:  2048</span><br><span class="line">  Maximum number of threads per block:           1024</span><br><span class="line">  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)</span><br><span class="line">  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)</span><br><span class="line">  Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">  Texture alignment:                             512 bytes</span><br><span class="line">  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)</span><br><span class="line">  Run time limit on kernels:                     No</span><br><span class="line">  Integrated GPU sharing Host Memory:            No</span><br><span class="line">  Support host page-locked memory mapping:       Yes</span><br><span class="line">  Alignment requirement for Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Device PCI Domain ID &#x2F; Bus ID &#x2F; location ID:   0 &#x2F; 1 &#x2F; 0</span><br><span class="line">  Compute Mode:</span><br><span class="line">     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver &#x3D; CUDART, CUDA Driver Version &#x3D; 8.0, CUDA Runtime Version &#x3D; 8.0, NumDevs &#x3D; 1, Device0 &#x3D; GeForce GT 740M</span><br><span class="line">Result &#x3D; PASS</span><br></pre></td></tr></table></figure><h1 id="第7步-安装-cudnn"><a href="#第7步-安装-cudnn" class="headerlink" title="第7步 安装 cudnn"></a>第7步 安装 cudnn</h1><p>登录官网：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，下载对应 cuda 版本且 linux 系统的 cudnn 压缩包，注意官网下载 cudnn 需要注册帐号并登录，不想注册的可从我的网盘下载：<a href="https://pan.baidu.com/s/1c2xPVzy" target="_blank" rel="noopener">https://pan.baidu.com/s/1c2xPVzy</a></p><p>下载完成后解压，得到一个 cudn 文件夹，该文件夹下include 和 lib64 两个文件夹，命令行进入 cudn/include 路径下，然后进行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F; #复制头文件</span><br></pre></td></tr></table></figure><p>然后命令行进入 cudn/lib64 路径下，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp lib* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F; #复制动态链接库</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;sudo rm -rf libcudnn.so libcudnn.so.5 #删除原有动态文件</span><br><span class="line">sudo ln -s libcudnn.so.5.1.10 libcudnn.so.5 #生成软衔接</span><br><span class="line">sudo ln -s libcudnn.so.5 libcudnn.so #生成软链接</span><br></pre></td></tr></table></figure><p>这里需要注意第三行命令，网上有人的第三行命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s libcudnn.so.5.1.5 libcudnn.so.5 #生成软衔接</span><br></pre></td></tr></table></figure><p>起初我执行的也是上条链接 libcudnn.so.5.1.5 的命令，但是后面编译caffe时出错，报错内容为 /usr/bin/ld: 找不到 -lcudnn，所以这里需要先查看一下自己应该链接的是 libcudnn.so.5.1.10 还是 libcudnn.so.5.1.5 ，查看方法为下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate libcudnn.so</span><br></pre></td></tr></table></figure><p>我执行完后显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yhao@yhao-X550VB:~$ locate libcudnn.so</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;libcudnn.so</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;libcudnn.so.5</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;libcudnn.so.5.1.10</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so.5</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so.5.1.10</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;info&#x2F;libcudnn.so.5.1.10.trashinfo</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;info&#x2F;libcudnn.so.5.trashinfo</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;info&#x2F;libcudnn.so.trashinfo</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so.5</span><br><span class="line">&#x2F;home&#x2F;yhao&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so.5.1.10</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libcudnn.so</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libcudnn.so.5</span><br></pre></td></tr></table></figure><p>可以看到我的文件是 libcudnn.so.5.1.10 ，并没有 libcudnn.so.5.1.5，所以第三行命令我链接的是 libcudnn.so.5.1.10 ，这里第三行链接命令视你的查看结果而定。</p><p>安装完成后可用 nvcc -V 命令验证是否安装成功，若出现以下信息则表示安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yhao@yhao-X550VB:~$ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2016 NVIDIA Corporation</span><br><span class="line">Built on Tue_Jan_10_13:22:03_CST_2017</span><br><span class="line">Cuda compilation tools, release 8.0, V8.0.61</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、安装依赖包 &lt;/p&gt;
&lt;p&gt;2、禁用 nouveau &lt;/p&gt;
&lt;p&gt;3、配置环境变量 &lt;/p&gt;
&lt;p&gt;4、下载 CUDA 8.0 &lt;/p&gt;
&lt;p&gt;5、安装 CUDA 8.0 &lt;/p&gt;
&lt;p&gt;6、验证 CUDA 8.0 是否安装成功 &lt;/p&gt;
&lt;p&gt;7、安装 cudnn &lt;/p&gt;
&lt;p&gt;8、安装 opencv3.1 &lt;/p&gt;
&lt;p&gt;9、安装 caffe &lt;/p&gt;
&lt;p&gt;10、安装 pycaffe notebook 接口环境&lt;/p&gt;
    
    </summary>
    
    
      <category term="cuda" scheme="https://qaqu.net/categories/cuda/"/>
    
    
      <category term="常用" scheme="https://qaqu.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>cuda和cudnn各版本下载地址</title>
    <link href="https://qaqu.net/2019-8-5-cuda%E5%92%8Ccudnn%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
    <id>https://qaqu.net/2019-8-5-cuda%E5%92%8Ccudnn%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2021-02-26T02:32:03.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>进入 最新版本 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a> ，依次选择 CUDA 类型然后下载即可。</p><p>所有版本 <a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p><h1 id="安装-cudnn"><a href="#安装-cudnn" class="headerlink" title="安装 cudnn"></a>安装 cudnn</h1><p>登录官网：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，下载对应 cuda 版本且 linux 系统的 cudnn 压缩包 </p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;进入 最新版本 &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.nvidia.com/cuda-downloads&lt;/a&gt; ，依次选择 CUDA 类型然后下载即可。&lt;/p&gt;
&lt;p&gt;所有版本 &lt;a href=&quot;https://developer.nvidia.com/cuda-toolkit-archive&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.nvidia.com/cuda-toolkit-archive&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装-cudnn&quot;&gt;&lt;a href=&quot;#安装-cudnn&quot; class=&quot;headerlink&quot; title=&quot;安装 cudnn&quot;&gt;&lt;/a&gt;安装 cudnn&lt;/h1&gt;&lt;p&gt;登录官网：&lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.nvidia.com/rdp/cudnn-download&lt;/a&gt; ，下载对应 cuda 版本且 linux 系统的 cudnn 压缩包 &lt;/p&gt;
    
    </summary>
    
    
      <category term="cuda" scheme="https://qaqu.net/categories/cuda/"/>
    
    
      <category term="下载地址" scheme="https://qaqu.net/tags/%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu18.04合盖休眠无法唤醒</title>
    <link href="https://qaqu.net/2019-8-5-%E8%A7%A3%E5%86%B3ubuntu18.04%E5%90%88%E7%9B%96%E4%BC%91%E7%9C%A0%E6%97%A0%E6%B3%95%E5%94%A4%E9%86%92/"/>
    <id>https://qaqu.net/2019-8-5-%E8%A7%A3%E5%86%B3ubuntu18.04%E5%90%88%E7%9B%96%E4%BC%91%E7%9C%A0%E6%97%A0%E6%B3%95%E5%94%A4%E9%86%92/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2019-12-20T08:45:21.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注意黑屏左上角是否有个小下划线"><a href="#注意黑屏左上角是否有个小下划线" class="headerlink" title="注意黑屏左上角是否有个小下划线"></a>注意黑屏左上角是否有个小下划线</h1><p>在黑屏下，直接按Ctrl+alt+F1或者Ctrl+alt+F7即可唤醒</p><p>（失败）</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注意黑屏左上角是否有个小下划线&quot;&gt;&lt;a href=&quot;#注意黑屏左上角是否有个小下划线&quot; class=&quot;headerlink&quot; title=&quot;注意黑屏左上角是否有个小下划线&quot;&gt;&lt;/a&gt;注意黑屏左上角是否有个小下划线&lt;/h1&gt;&lt;p&gt;在黑屏下，直接按Ctrl+alt+F1或者Ctrl+alt+F7即可唤醒&lt;/p&gt;
&lt;p&gt;（失败）&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://qaqu.net/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="https://qaqu.net/tags/ubuntu/"/>
    
  </entry>
  
</feed>
